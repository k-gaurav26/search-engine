Problem
WARNING: This problem has large input / output files. Use of faster I/O methods is recommended.
Chef has encrypted the super secret recipe for his bitsoup into a sequence of N unsigned integers A1, A2, ... AN. Each of these are M bit integers - meaning, their binary representation will only have at most M bits.
Chef is now transmitting this recipe to the Sous Chef. He partitions the sequence into several disjoint, contiguous groups and sends them one by one. Each partition may contain one or more integers which are contiguous in the sequence. Chef can partition a sequence of N integers in many ways, but the receiving program of the Sous Chef has a constraint.
For each group of integers it receives, let S represent the sum of the integers in the group. The receiver program only accepts the group of integers if the Mth least significant bit of S is 0. See the explanation section for clarity.
Chef wants to know how many ways exist to partition the recipe such that the Sous Chef can receive it completely.
Input
The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M denoting the length of Chef's sequence and the number of bits that are adequate to represent each number in the sequence. The second line contains N space-separated integers A1, A2, ... AN denoting the sequence.
Output
For each test case, output a single integer denoting the number ways you can partition Chef's sequence such that the Sous Chef's receiving program will accept each partition. Since this number can be very large output this number modulo 1000000009.
