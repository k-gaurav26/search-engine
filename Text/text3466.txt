Problem
Read problem statements in Mandarin Chinese, Bengali, Russian, and Vietnamese as well.
The King of Chefland is a fan of triplets, especially Pythagorean triplets. His son, prince Sebi, designed the first CPU of Chefland.
Nobody wants to argue with the son of the king, so everybody agrees that he is a great hardware designer. However, he forgot a lot of important instructions, like assigning a constant to a register. Chefland is now looking for a programmer who can load some given triplets to registers quickly.
Architecture of Sebi's CPU:

There are four 64-bit registers based on the X64 architecture. These registers are named rax, rbx, rcx and rdx.
Parts of each 64-bit register can be used as smaller registers. For y equal to a, b, c or d, we have the following registers:

eyx: the lower (least significant) 32 bits of ryx
yx: the lower 16 bits of ryx
yl: the lower 8 bits of ryx
yh: the upper 8 bits of yx


The CPU cannot access any memory storage other than these registers.
The CPU supports several instructions based on assembly languages. Each instruction takes one or two registers as operands. Immediate values as operands are not supported. If an instruction takes two operands, they do not have to be distinct.
If an instruction takes two operands, they must have registers with the same width (number of bits). When the operands of an instruction are registers with width b, the values stored in them are treated as unsigned b-bit integers.
An instruction on registers with width b computes a result ― an unsigned b-bit integer ― and stores it in the register given as the first operand. In case of overflow or underflow, the result is treated as computed modulo 2b; all bits outside the first-operand register remain unchanged.
The available one-operand instructions and their results are:

dec reg: reg minus 1
inc reg: reg plus 1
not reg: bitwise NOT of reg


The available two-operand instructions and their results are:

and reg1 reg2: bitwise AND of reg1 and reg2
or reg1 reg2: bitwise OR of reg1 and reg2
xor reg1 reg2: bitwise XOR of reg1 and reg2
shl reg1 reg2: reg1 shifted left by reg2 bits (and inserts reg2 0-s as the least significant bits)
shr reg1 reg2: reg1 shifted right by reg2 bits (and inserts reg2 0-s as the most significant bits)
add reg1 reg2: reg1 plus reg2
sub reg1 reg2: reg1 minus reg2
mul reg1 reg2: reg1 multiplied by reg2
div reg1 reg2: reg1 divided by reg2 (integer division)
mod reg1 reg2: reg1 modulo reg2 (remainder of reg1 after division by reg2)
mov reg1 reg2: reg2 (the instruction copies the value of reg2 to reg1)


The only operations where the result could overflow are shl, add, sub, mul, inc and dec. In sub and dec, the result of i−j modulo 2b for j>i is 2b+i−j. In all other instructions, modulo simply corresponds to discarding all except the least significant b bits.
It is not allowed to use the div or mod operation if reg2 contains 0.

Initially, all four registers contain 0-s. You are given N triplets of 64-bit integers (a1​,b1​,c1​),(a2​,b2​,c2​),…,(aN​,bN​,cN​) and you should write a program (a sequence of instructions) such that each triplet appears in the registers at some point during the execution of this program. The order in which they appear does not matter. Formally, for each valid i, there should be an instruction in your program such that immediately after this instruction is executed, one of the registers contains the value ai​, one contains bi​ and one contains ci​ (the fourth register may contain anything).
Input

The first line of the input contains a single integer N.
N lines follow. For each i (1≤i≤N), the i-th of these lines contains three space-separated integers ai​, bi​ and ci​.

Output

First, print a line containing a single integer P ― the number of instructions in your program.
Then, print P lines. For each valid i, the i-th of these lines should contain the i-th instruction from your program in the format described above.

