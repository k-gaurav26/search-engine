Problem

  After finishing his internship at DeepMind, Mathison has started his own company. Knowing that storing data is probably the most important thing a company should take care of, he decided to manage a data warehouse.
  DWs are central repositories of integrated data from one or more disparate sources. They store current and historical data in one single place and are used for creating analytical reports for knowledge workers throughout the enterprise (check Wikipedia  for more details).


  Managing a DWH is not an easy task so Mathison would like you to help him. In this task, you have to implement a simplified version of a data warehouse managing system. A DWH managing system is an interactive application that handles users' requests,
  stores and retrieves data, buys hard disk drives (HDDs) and much more.


  Your application must handle three types of events:
  
0 cid q
    Client with id cid wants to store q cells of data.
    1 cid p
    Client with id cid wants to retrieve his p-th data-cell.
    2 hid
    Hard-disk with id hid has crashed and all data that was stored on it is lost. The hard-disk can still be used in the future!
  

In order to simplify the problem, you can assume that a client is allowed to store data only once. But he is allowed to query the warehouse as many times as he wants.
A client will not query
  the data warehouse if he has no data stored!

  In order to handle some events, your application can send these types of commands involving storing/retrieving data:
  
s hid pid
    This command must follow a client's request to store data and means that you store the previous client's data on hard-disk hid, starting at cell pid (0-based indexing)  For example, you might have a request of form 0 100 10.
    The client with id 100 wants to store 10 units (cells) of data in our warehouse. Let's assume you have a hard-disk (with id 5). You can respond with a command
    s 5 120, meaning that you store the client's 100 units of data on only one hard-disk, hdd5 from cell 120 to cell 129. All ids must be valid. You must be careful not to overflow any HDD!
Note: You can choose not to store the data (a risky move). In this case, you have to print -1 -1 for hid and pid. No penalty fee will be charged in this case!
<li><b>i hid pid</b></li>
This command <b>must</b> follow a client's request to retrieve his data. <br> For example, let's assume that you had the commands described above and you get a new one <b>1 100 5</b>. In this case, we have to respond with <b>i 5 125</b> as you
stored the data from client 100 on hdd5 and the <em>5-th</em> cell of data is located on the <em>125-th</em> cell on hdd5.<br>
<b>Note: If you do not have the requested data, <em>hid</em> and <em>pid</em> must be equal to -1 (and you will pay a <b>fixed penalty</b> - see input and scoring sections).<br> Note: If you report a false information (i.e. the <em>pid-th</em> cell
on the hdd <em>hid</em> doesn't contain the request cell), you will get a WA. Everyone hates fake information!</b>




  There are other types of commands that you can use in order to manage the data warehouse:
  
b t
    Buy a new hard-disk of type t. The newly purchased hard-disk will get the next available id starting from zero (the first one you buy will have id 0, the second one will have id 1 and so on).
    cp hidsource pidsource q hiddestination piddestination
    Copy q cells of data from hard-disk hidsource, starting at pidsource, to hard-disk hiddestination, starting at piddestination.
  

Interactive

  This task is interactive. You have to write a program that will interact with a custom judge (i.e. the judge is deterministic but the events you get will depend on your program behavior). You have to start by reading the number of events,
 the number of types of hard-drives and their description (see Input section for more details). This information doesn't depend on your program. Then you are able to exchange messages with the judge. There are three types of messages:
  
g
    If there are still events to handle, you can use this type of message to get a new one. You will get a event of one of the three types described in above.
Note: If you ask for a new request even if you haven't solved the last one or if there are no more events you will get a WA.
    p cmd
    You can use this type of message to send a command cmd to the judge. The command can have any form described in the statement.
    end
    This message must be sent in order to end the interaction with the judge. If the message is not sent the judge will crash with a WA.
  
Note: Both types of messages must end with a newline ('\n' character).
Note: Don't forget to flush the output buffer (i.e. stdout).

Scoring
Everything has a price!
Hard-disks cost money and they read and write at different speeds (so there are different costs for reading/writing)
Storing and retrieving data also has a price. 
If you store q units of data on a hard-disk that writes data at w units per second the cost of this operation will be q * w.
If you read q units of data from a hard-disk that reads at speed r units per second, the operation will cost you q * r.
If you do not have some requested data (you didn't store it or you overwrote the cell) you must pay a fixed penalty.
Your score for one test is the sum of costs for all the commands that you make. 
The final score is the sum of scores in all tests. The goal is to minimize that score.
If your program works incorrectly on any of the tests, you will get a WA. Otherwise, you will get AC and your score will be decided by only a fraction of the tests (see test generation). The final score will be revealed after the contest.
Input
The first line of the input file contains two integers, N and H, where N is the number of events and H is the number of types of hard-disks available.
  The next H lines will contain 4 integers p r w c (separated by spaces), where p is the price associated with this type of hard-disk, c is the capacity (there are c data-cells) and r and w are the reading/writing speeds (costs) or this type.
  The next line will one contain integer, penalty, the penalty you pay if you don't have the requested data.
  All N events are generated by the judge when they are requested by your program.

Output
The output file will be your program's interaction with the judge.
Note: Please read the constraint on the maximum number of messages!
