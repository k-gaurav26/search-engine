Problem

After the first chemistry lesson, Ron realized that the simplest way to compress a string of Latin characters is to write it down as a list of pairs of character and integer. This is done by writing each segment of identical characters as the character and the length of the segment.
For example the string s = "AABBBCCCC" can be compressed as [ ('A', 2), ('B', 3), ('C', 4) ].
In compressed notation, two consecutive pairs cannot have same character. For example [('A', 2), ('A', 4)] is invalid and its correct representation is [('A', 6)]. Ron has written down a string in compressed notation, and he wants to count the number of sub-strings (a segment of consecutive characters) of the original string that are palindromes.


Recall that a palindrome is a non-empty string that reads the same backward as forward. Two sub-strings are considered to be different if they have different lengths or start at different positions in the original string.

Input
The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. 
Each test case gives a string in compressed notation. The first line of each test case contains an integer K, the number of (character, integer) pairs in compressed notation. Each of the next K lines contains a single character, followed by a space, followed by a positive integer, the ith line being the ith pair in the list.
Output
For each test case, output a single line containing the corresponding answer. 

