Problem
There's a tree and every one of its nodes has a cost associated with it. Some of these nodes are labelled special nodes. You are supposed to answer a few queries on this tree. In each query, a source and destination node (SNODE and DNODE) is given along with a value W. For a walk between SNODE and DNODE to be valid you have to choose a special node and call it the pivot P. Now the path will be SNODE ->P -> DNODE. For any valid path, there is a path value (PV) attached to it. It is defined as follows:
Select a subset of nodes(can be empty)  in the path from SNODE to P (both inclusive) such that sum of their costs (CTOT1​) doesn't exceed W.
Select a subset of nodes(can be empty) in the path from P to DNODE (both inclusive) such that sum of their costs (CTOT2​) doesn't exceed W.
Now define PV=CTOT1​+CTOT2​ such that the absolute difference  x=∣CTOT1​−CTOT2​∣ is as low as possible. If there are multiple pairs of subsets that give the same minimum absolute difference, the pair of subsets which maximize PV should be chosen.
For each query, output the path value PV minimizing x as defined above.
Note that the sum of costs of an empty subset is zero.
Input

First line contains three integers N - number of vertices in the tree, NSP - number of special nodes in the tree and Q - number of queries to answer.
Second line contains N−1 integers. If the ith integer is Vi​ then there is an undirected edge between i+1 and Vi​ (i starts from 1 and goes till N−1).
Third line contains N integers, the ith integer represents cost of the ith vertex.
Fourth line contains NSP integers - these represent which nodes are the special nodes.
Following Q lines contains three integers each - SNODE, DNODE and W for each query.

Output
For each query output a single line containing a single integer - the path value PV between SNODE and DNODE.
