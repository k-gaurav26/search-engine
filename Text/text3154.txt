Problem
A vertex-induced subgraph of a simple graph G is one that can be obtained from G by removing some (possibly, none) vertices. When a vertex is removed, all edges incident to it must also be removed.
A vertex-induced cycle is a vertex-induced subgraph that is also a cycle.
Equivalently, a cycle C is vertex induced, if for every edge e in the graph G that does not belong to C, at most one of its ends lies on C.
You are given a simple undirected graph G with N vertices and M edges. Each edge has a label that is either 0 or 1.
In one move, you can select any vertex-induced cycle in G and flip the values of the label in all edges of the cycle, (i.e. change every 0 to a 1 and every 1 to a 0).
The cost of one such move is equal to the size (i.e. number of edges) of the cycle.
The total cost for a sequence of moves is the sum of the costs of each individual move.
Determine if there exists a sequence of moves after which all edges have label 0. If such a sequence exists, then find a sequence of moves whose total cost does not exceed 3⋅k, where k is the number of edges in G that have label 1 before any moves are done; otherwise, print −1.
It's guaranteed that if an answer exists, there exists a sequence of moves with a total cost not exceeding 3⋅k.
Note: Test data contains large input files. It is recommended that you use fast input/output methods.
Input Format

The first line of input contains an integer T, the number of test cases. The description of the T test cases follows.
The first line of each test case contains two space-separated integers N,M — the number of vertices and edges of the graph respectively.
The next M lines of each test case contain three space-separated integers u,v, and w, denoting an edge between vertices u,v with label w.

Output Format

For each test case, print the answer starting from a new line in the following format:
If it is impossible to convert all edge labels to 0 as per the statement, then print −1.
Otherwise, in the first line print the number of operations that you require to perform, (say x).
In the i-th of the next x lines, print the number of vertices of the cycle you choose in the i-th move followed by the vertices of the cycle. The vertices must be printed in either clockwise or anticlockwise order. That is, print s x1​ x2​ … xs​ to denote a cycle of size s whose edges are (x1​,x2​),(x2​,x3​),…,(xs−1​,xs​),(xs​,x1​).
If there are multiple correct outputs, you may print any of them.

