Problem
 Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.

Chefland is under attack. The enemy forces are using powerful tanks to break Chefland's defense. The government wants to destroy the enemy tanks, but is unsure of their numbers. It has, therefore, requested the math whizs amongst the public (that's you guys!) to come out and help estimate how many tanks the enemy has. The government simulates the current situation to decide who has the best solution.
The government spies have gathered the following information about tanks and their production line:

There are K different types of tanks.
One production line can make only one type of tank.
Two different production lines cannot make the same type of tank.
When installing a production line, the enemy mathematicians have to setup the serial_id generator, which cannot be modified later.
Difference between the serial_id's of any two tanks of the same type cannot exceed M.


 The inventor of the serial_id generator wanted to make the serial numbers extremely difficult to guess, and so he built a tricky machine.
The machine is set up using the following three initial parameters.

start_id is a non-negative integer
direction can be either increment or decrement
sequence_type can be normal, prime, Ulam(1,2), or Ulam(2,3)


More details about the serial_id generator are provided later.


We can ask the Chefland government to capture a tank, and then provide us with the captured tank type and serial_id. The capture query can be: 

Capture a tank of type i (1 ≤ i ≤ K). This costs Ci.
Special capture: capture a tank of any type. This operation has a cost C.


Every tank type has different armour, and therefore we need different kinds of bomb for each of them, which also have different prices (Bi for the bomb piercing the armor of the ith tank type).
After we finish the above scouting process, we need to provide the number (Di) of bombs we need (for each type).
Each bomb can destroy one tank (but the bomb completely annihilates the tank to little bits of scrap metal, so we can't extract any information from a destroyed tank.)
If the enemy has Ri tanks remaining after the captures, and we ask for Di bombs but Ri > Di, than we have to pay Pi penalty for each remaining tank (after Di of them have been destroyed).

 The goal is to minimize the capture_cost + destroy_cost + penalty_cost:

capture_cost: ∑ cost of capture operations
destroy_cost: ∑ Di * Bi (some over all tank types)
penalty_cost: ∑ max((Ri - Di) , 0) * Pi (sum over all tank types)


More detail about serial_id generator:

normal sequence: 0, 1, 2, 3, … is the sequence of non-negative integers.
prime sequence: the ith element is the (ith prime number + 1) / 2 (integer division). So, the sequence is: 1, 2, 3, 4, 6 ….
Ulam(1,2) sequence: 1, 2, 3, 5, …. You can read more about this sequence  here. 
Ulam(2,3) sequence: 2, 3, 5, 7, ….

So the serial_id of the ith tank will be start_id ± the ith number in the sequence. (plus if the direction of the serial id generator was setup with the direction parameter as increment, minus otherwise).
e.g. SerialGenerator(start_id = 12345, increasing, Ulam(1,2)) will produce the following serial_id's: 12346, 12347, 12348, 12350, 12352 ….


Note. This might help: German tank problem.

Input
The first line of input contains the integer M.
The second line of the input contains an integer U12, denoting the number of elements of the Ulam(1,2) sequence provided to you. The next U12 lines contain an integer each: such that the ith line gives the ith element of the Ulam(1,2) sequence. Each of these numbers is at most  M + 1.
The following line contains an integer U23 denoting the number of Ulam(2,3) sequence provided to you. The next U23 lines contain an integer each. Each of these numbers is at most  M + 2.
The following line of input contains an integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains two space-separeated integers: K and C. This is followed by a line containing K space-separated integers: C1, C2, …, CK.
Similarly, the next two lines for the test case contain K space-separated integers each: the first line specifying the sequence Bi, and the second Pi.
Output
For each test case, the output should be as follows.

If you want to capture a tank, then just output a line with a non-negative integer denoting the type of the tank you want captured, or 0 if you do not care about the type of the tank being captured.


You can keep on repeating the above request until desired. If you think you have enough information, then output -1 in a new line. This ends the scouting process. Of course, if you do not want to capture any tanks at all, then you can output this in the first line itself.


After scouting is finished, print a single line with K space-separated non-negative integers denoting the sequence Di. In case any Di is negative, or exceeds M, then you will get a wrong answer verdict.

Interactivity details
This is an interactive challenge problem, so after you output the description of your capture request, flush the output buffer. In C++, you can do this with fflush(stdout); routine.
After you do it, you'll receive the capture tank type, and its serial_id. If there are no tanks of this type left, then you will get type -1 answer. (Also applies if the requested type is zero, and no more tanks are available to be captured.)
