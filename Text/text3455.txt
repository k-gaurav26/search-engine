Problem
 Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.
Let's play Scrabble on a graph!
There are K tiles. Each of the tiles either contains a single uppercase Latin letter or is a blank tile — meaning that it can represent any uppercase Latin letter.
Given is also a graph with N nodes and M edges. Initially, some of the nodes contain tiles. The rest of the nodes are unoccupied. 
Your goal is to construct words from the tiles, by placing them on the unoccupied nodes of the graph. You need to play a number of correct turns - it is completely up to you, how many turns to play.
Each turn consists of placing at least one of the tiles on some node of the graph which currently has no tile. Then, you need to construct a path in this graph that contains at least one of the just placed tiles such that the string obtained by writing out the letters from the nodes on this path (and previously replacing blank tiles with arbitrary Latin letters) is included in the provided dictionary of existing English words. You can't play one word twice, though the same blank tile can represent different letters in different turns.
Moreover, each node has its own multiplier value, denoting the value by which the score of the placed tile will be multiplied anytime this node participates in the creation of a word.
The score you get for the turn will be equal to the sum of the scores for every tile used in the construction of the word,  each multiplied by the multiplier value of the corresponding node. The number of points for each letter is based on the letter's frequency in standard English writing and will be listed below; commonly used letters such as vowels are worth one point, while less common letters score higher, goign up to 10 points each for Q and Z.
You need to get as many points as possible in total, in the end (by the last of your output moves). For making game more interesting, you will be aware only of the first min(20, number_of_remaining_letter_tiles) letter tiles in the initially shuffled letter tiles queue.
The frequency of the letter tiles and corresponding scores

0 points: 2% of the total number of the tiles
1 point: E × 12%, A × 9%, I × 9%, O × 8%, N × 6%, R × 6%, T × 6%, L × 4%, S × 4%, U × 4%
2 points: D × 4%, G × 3%
3 points: B × 2%, C × 2%, M × 2%, P × 2%
4 points: F × 2%, H × 2%, V × 2%, W × 2%, Y × 2%
5 points: K × 1%
8 points: J × 1%, X × 1%
10 points: Q × 1%, Z × 1%

In order to ensure that the number of tiles of each type will be integral, the total number of tiles will always be divisible by 100.
Input
The first line of the input contains an integer D denoting the number of words in the dictionary.
Each of the following D lines contains a string of uppercase Latin letters, denoting a dictionary word. The dictionary in each test case (except the sample one) will be the same as SOWPODS. You can download it here.
The following line contains two space separated integerd N and M, denoting the number of the nodes and edges in the game graph.

The following line contains N space separated integers, where the ith of them denotes the multiplier value of the ith node.
The next line contains N characters. The ith of these characters is either a dot (character ".", ASCII code 46), in case there is no letter written in the ith node, or an uppercase latin letter - in case this letter is written in the ith node, or a dash (symbol "_", ASCII code 95) in case there is a blank tile on the corresponding node.
Each of the following M lines contain a pair of space separated integers Xj and Yj, denoting that there is a bidirectional edge connecting the nodes numbered Xj and Yj.
The following line contains a string S of min(20, number-of-remaining-letter-tiles) uppercase latin letters and dashes (symbol "_", ASCII code 95), denoting the tiles that you currently have.
Output
Output a few blocks, describing the moves. After the last move description, output -1 on the separate line.
In the first line of the block describing a move, output C - the number of nodes where you will put the tiles during this move. C should be positive, otherwise you will get a wrong answer verdict.
Then, output C lines, each should contain a single-space-separated uppercase an integer and an uppercase  Latin letter or a dash, denoting the tile you'll put and the node where you'll put it. In case there is no such tile currently, or you put a tile to the node that already has a tile in it, you will get a wrong answer verdict.
The following line should contain a single integer L, denoting the number of letters in the word you'll construct. If L is not positive, you will get a wrong answer verdict.
The following line should contain L space separated integers, denoting a correct path in the graph which forms a word that has never been formed before. As you may have noted, the path doesn't have to be simple If these integers don't represent a correct path, or none of the newly placed tiles is used, you will get a wrong answer verdict.
The following line should contain a string of L uppercase Latin letters, denoting the word you want to play now. In case this is not a dictionary word, or this word had already been played, or the provided path doesn't correspond to this word, you will get a wrong answer verdict.
Finally, if all the requirements are met, you will get an accepted verdict.
Pay attention that you're allowed to play the same blank tile differently in different moves. Also, you should use at least one node among those you've just put a tile on.
Interactivity details
This is an interactive challenge problem, so after you output the description of the corresponding move, flush the output buffer. In C++ you can do it with fflush(stdout); routine.
After you do it, you'll receive a new string S, where the used letters will be replaced with the next ones.
